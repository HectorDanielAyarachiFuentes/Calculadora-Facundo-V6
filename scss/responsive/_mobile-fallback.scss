/* ======================================================= */
/* --- COMPATIBILIDAD Y AJUSTES ESPECÍFICOS PARA IOS --- */
/* ======================================================= */

/*
  NOTA: En tu código anterior usaste el ID #contenedor, y en este bloque aparece
  la clase .calculator-container. Asegúrate de usar el selector correcto que
  corresponda a tu contenedor principal. Para este ejemplo, usaré los que
  proporcionaste en este bloque.
*/

// --- 1. Fallback para navegadores que NO soportan unidades `dvh` ---
// `dvh` (dynamic viewport height) es ideal para móviles, pero necesita un fallback.
// Usamos `vh` como alternativa, aunque puede causar problemas con las barras del navegador.
@supports not (height: 100dvh) {
    body {
        min-height: 100vh;
        
        @include breakpoint(mobile) {
            height: 100vh;
            // `-webkit-fill-available` es un intento de fallback específico para WebKit.
            min-height: -webkit-fill-available;
        }
    }
    
    // Anidamos el breakpoint dentro de cada selector para mayor claridad.
    @include breakpoint(mobile) {
        .calculator-container {
            height: auto;
            min-height: 80vh;
        }
        
        .keyboard-container {
            max-height: 65vh;
            min-height: 55vh;
        }
        
        .keyboard {
            min-height: 50vh;
        }
    }
}


// --- 2. Soporte específico para el viewport de iOS Safari ---
// iOS tiene un comportamiento particular con la altura del viewport (vh).
// `-webkit-fill-available` fuerza al contenedor a ocupar todo el espacio disponible,
// adaptándose mejor cuando aparece el teclado virtual o cambian las barras del navegador.
@supports (-webkit-touch-callout: none) {
    body, 
    #contenedor { // Usando #contenedor como en el primer ejemplo. Ajusta si es necesario.
        height: -webkit-fill-available;
        min-height: -webkit-fill-available;
    }
}


// --- 3. Mejores prácticas para las áreas seguras de iOS (Notch, Home Indicator) ---
// La función `max()` nos permite establecer un padding/margen mínimo, pero se expande
// para respetar el área segura (`env()`) si esta es mayor.
@supports (padding: max(0px)) {
    @include breakpoint(mobile) {
        .calculator-container {
            // Asegura un padding mínimo de 10px, pero respeta el área segura si es mayor.
            padding-left: max($safe-area-left, 10px);
            padding-right: max($safe-area-right, 10px);
        }
        
        .keyboard-container {
            // Evita que el teclado quede debajo de la barra de inicio de iOS.
            margin-bottom: max($safe-area-bottom, 10px);
        }
    }
}