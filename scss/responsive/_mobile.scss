/* ================================================= */
/* --- VARIABLES GLOBALES PARA UN FÁCIL MANTENIMIENTO --- */
/* ================================================= */
$breakpoint-mobile: 600px;
// $breakpoint-small-mobile ya no es necesario gracias a la tipografía fluida.

// Espaciados consistentes
$spacing-xs: 5px;
$spacing-sm: 10px;
$spacing-md: 15px;
$spacing-lg: 20px;

// Radios de borde
$border-radius-sm: 8px;
$border-radius-lg: 15px;


/* ================================================= */
/* --- MIXINS REUTILIZABLES --- */
/* ================================================= */
// Mixin optimizado para aceptar cualquier media query
@mixin respond-to($query) {
    @media #{$query} {
        @content;
    }
}


/* ============================================== */
/* --- DISEÑO RESPONSIVE PARA MÓVILES MEJORADO --- */
/* ============================================== */
@include respond-to("(max-width: #{$breakpoint-mobile})") {
    
    body { 
        padding: 0;
        // La altura 100dvh (dynamic viewport height) se adapta a la aparición/desaparición
        // de las barras de navegación del navegador móvil.
        height: 100dvh; 
        overflow: hidden; // Evita el scroll en la vista de la app.
    }
    
    #contenedor {
        width: 100%;
        height: 100%;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        opacity: 1 !important; // Asumiendo que se necesita para sobreescribir algo.
    }
    
    header {
        padding: $spacing-sm $spacing-md 0;
        margin-bottom: $spacing-md;
        flex-shrink: 0; // Evita que el header se encoja.
        
        h1 {
            // MEJORA: Tipografía fluida. Se ajusta suavemente al tamaño de la pantalla.
            // clamp(min, preferido, max)
            font-size: clamp(1.8rem, 8vw, 2.2rem) !important;
            line-height: 1.1;
            margin-bottom: $spacing-xs;
        }
        
        .subtitle {
            font-size: 0.7rem !important;
            margin-top: $spacing-xs;
        }
    }
    
    #display {
        width: calc(100% - ($spacing-lg * 2)); // Centrado y con padding lateral
        margin: 0 auto $spacing-md;
        padding: $spacing-md;
        min-height: 70px;
        flex-shrink: 0;
        // MEJORA: Tipografía fluida también para el display.
        font-size: clamp(2rem, 10vw, 2.8rem) !important;
    }
    
    #cuerpoteclado {
        width: calc(100% - $spacing-lg) !important;
        margin: 0 auto;
        border-radius: $border-radius-lg;
        // Clave para la responsividad vertical: crece para ocupar todo el espacio sobrante.
        flex-grow: 1; 
        display: flex; // Permite que el grid interno (#teclado) ocupe el 100% de la altura.
        padding: $spacing-xs; // Un pequeño padding para el grid
    }

    // MEJORA: Se define explícitamente el grid para el teclado.
    #teclado {
        width: 100%;
        height: 100%;
        display: grid;
        // 4 columnas de igual tamaño.
        grid-template-columns: repeat(4, 1fr); 
        // 5 filas de igual tamaño. Se distribuyen el alto total disponible.
        grid-template-rows: repeat(5, 1fr); 
        gap: $spacing-sm; // Espacio uniforme entre botones.

        button {
            // MEJORA: Tipografía fluida para los botones.
            font-size: clamp(1.3rem, 5vw, 1.6rem) !important;
            border-radius: $border-radius-sm;
            // Aseguramos que los botones se vean bien
            display: flex;
            justify-content: center;
            align-items: center;
            border: none;
            cursor: pointer;
        }

        // Clase de ejemplo para un botón que ocupe dos columnas,
        // como el botón "Ver Pantalla" de la imagen.
        .btn-span-2 {
            grid-column: span 2;
        }
    }
    
    /* --- MEJORA: SOPORTE PARA ORIENTACIÓN HORIZONTAL --- */
    @include respond-to("(orientation: landscape) and (max-height: 500px)") {
        #contenedor {
            flex-direction: row; // Cambia a layout horizontal.
            padding: $spacing-sm;
            gap: $spacing-sm;
        }
        
        // Creamos una columna para el header y el display
        .info-column {
            flex: 1; // Ocupa la mitad del espacio
            display: flex;
            flex-direction: column;
            
            header { padding: 0; margin-bottom: $spacing-sm; }
            #display { 
                flex-grow: 1; // El display ocupa el espacio sobrante en esta columna
                height: 100%;
                width: 100%;
                margin: 0;
                font-size: clamp(1.5rem, 8vh, 2.5rem) !important; // Ajustado a la altura
            }
        }
        
        // El teclado ocupa la otra mitad
        #cuerpoteclado {
            flex: 1;
            height: 100%;
            width: 100%;
            margin: 0;
            padding: $spacing-xs;
        }
    }
}

/* Ajuste para evitar que el teclado virtual de iOS afecte el alto del viewport */
/* Es una excelente práctica que ya tenías, la mantenemos. */
@supports (-webkit-touch-callout: none) {
    body, #contenedor {
        min-height: -webkit-fill-available;
        height: -webkit-fill-available;
    }
}